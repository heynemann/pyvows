# -*- coding: utf-8 -*-
'''This module is the foundation that allows users to write PyVows-style tests.
'''

# pyVows testing engine
# https://github.com/heynemann/pyvows

# Licensed under the MIT license:
# http://www.opensource.org/licenses/mit-license
# Copyright (c) 2011 Bernardo Heynemann heynemann@gmail.com

import fnmatch
import glob
import os
import time
import sys

#-------------------------------------------------------------------------------------------------

elapsed = lambda start_time: float(round(time.time() - start_time, 6))  # pylint: disable=invalid-name

def collect(path, pattern):
    path = os.path.abspath(path)
    sys.path.insert(0, path)
    files = locate(pattern, path)
    for module_path in files:
        module_name = os.path.splitext(
            module_path.replace(path, '').replace(os.sep, '.').lstrip('.')
        )[0]
        __import__(module_name)

def get_path_for_module(module, relpath=True):
    '''Returns the path for the module `module`.'''
    modpath = module.replace('.', os.path.sep)
    modpath = os.path.abspath(modpath)
    if relpath:
        modpath = os.path.relpath(modpath)
    modpath += '.py'
    return modpath

def locate(pattern, root=os.curdir, recursive=True):
    '''Recursively locates test files when `pyvows` is run from the
    command line.

    '''
    root_path = os.path.abspath(root)

    if recursive:
        return_files = []
        for path, dirs, files in os.walk(root_path):
            return_files += [os.path.join(path, file_) for file_ in fnmatch.filter(files, pattern)]
        return return_files
    else:
        return glob.glob(os.path.join(root_path, pattern))

# Not covered because this is easy to test (just print to STDOUT)
def template(): # pragma: no cover
    '''Provides a template containing boilerplate code for new PyVows test
    files. Output is sent to STDOUT, allowing you to redirect it on
    the command line as you wish.

    '''
    
    # pylint: disable=invalid-name
    
    from datetime import date
    from textwrap import dedent

    from pyvows import version

    TEST_FILE_TEMPLATE = '''\
    # -*- coding: utf-8 -*-
    ##  Generated by PyVows v{version}  ({date})
    ##  http://pyvows.org

    ##  IMPORTS  ##
    ##
    ##  Standard Library
    #
    ##  Third Party
    #
    ##  PyVows Testing
    from pyvows import Vows, expect

    ##  Local Imports
    import

    ##  TESTS  ##
    @Vows.batch
    class PleaseGiveMeAGoodName(Vows.Context):

        def topic(self):
            return # return what you're going to test here

        ##  Now, write some vows for your topic! :)
        def should_do_something(self, topic):
            expect(topic)# <pyvows assertion here>

    '''.format(
        version = version.to_str(),
        date = '{0:%Y/%m/%d}'.format(date.today())
    )

    sys.stdout.write(dedent(TEST_FILE_TEMPLATE))
